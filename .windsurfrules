You are working on a web-based (Vite, Mantine, and Typescript) Markdown-powered (Github Formatted Markdown) note-taking application with the following specifications:
- Vite for development
- UI w/ Mantine + CSS modules (docs found at [https://mantine.dev/docs](https://mantine.dev/docs) for Mantine)
- IndexedDB for data persistence (docs found at [https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API))
- `markdown‑wasm` (Markdown parser & HTML renderer implemented in WebAssembly) for Markdown parsing (docs found at [https://github.com/rsms/markdown-wasm](https://github.com/rsms/markdown-wasm))
- Biome formatter, commit hooks via Husky + lint‑staged, Conventional Commits enforced by CI (docs found at [https://biomejs.dev/](https://biomejs.dev/) for Biome, [https://typicode.github.io/husky/](https://typicode.github.io/husky/) for Husky, and [https://github.com/lint-staged/lint-staged](https://github.com/lint-staged/lint-staged)for lint‑staged)
- `@hello-pangea/dnd` for drag-and-drop (docs found at [https://github.com/hello-pangea/dnd](https://github.com/hello-pangea/dnd))
- Context + Reducer for state management
## User Experience Guidelines:
- Display timestamps for creation and last modification
- Include a clear way to create, edit, and delete notes
- Show search results in real-time as the user types
- Provide formatting shortcuts (bold as ⌘B, italic as ⌘I, lists as ⌘L, etc.)
- Include ONLY a dark theme
- Be HIGHLY opinionated; have EXPERT knowledge of the trade to reduce decision fatigue
- Use virtualized lists for big lists
- Use `@hello-pangea/dnd` for re‑ordering notes
- Use Mantine 7+ w/ CSS Modules
- Use CSS‑vars for styling consistent EVERYWHERE
- Confirm you’re on Mantine 7+ to avoid painful migration later
- Build as an offline-first PWA w/ a Service Worker (<5 KB sw.js) that caches static assets and queues IndexedDB writes for background sync
- Include conflict‑resolution rule: “last‑writer‑wins unless title differs, then merge blocks”
## Mantine UI Dependencies:
- @mantine/hooks: Hooks for state and UI management
- @mantine/core: Core components library: inputs, buttons, overlays, etc.
- @mantine/form: Form management library
- @mantine/dates: Date inputs, calendars
- @mantine/charts: Recharts based charts library
- @mantine/notifications: Notifications system
- @mantine/code-highlight: Code highlight with your theme colors and styles
- @mantine/tiptap: Rich text editor based on Tiptap
- @mantine/dropzone: Capture files with drag and drop
- @mantine/carousel: Embla based carousel component
- @mantine/spotlight: Overlay command center
- @mantine/modals: Centralized modals manager
- @mantine/nprogress: Navigation progress
## Guidelines:
- Always begin ALL interactions by researching the LATEST documentation for the tools and technologies you're using
- Always research first things first. Never assume you know something. Your memory is not persistent, your knowledge cutoff
## Writing Docs:
- All documentation must live in the `/docs` folder
- All documentation must be written in Github Flavored Markdown
- All documentation must be stored in the `/docs` directory
- Documentation must be written in GitHub Flavored Markdown (`.md` files)
- Follow established naming conventions: `module-name.md` (use kebab-case)
- All documentation must be written in a way that is easy to read and understand
- All documentation must be written in a way that is easy to update
- Write documentation that is clear, concise, and accessible to developers of all experience levels
- Write all documentation using active voice
- Write using functional, not theoretical, language
- Write using actionable, not passive, language
- Structure content with consistent headings and navigation patterns
- Keep documentation modular to facilitate efficient updates and maintenance
- Include code examples with proper syntax highlighting
- Update documentation whenever related code changes
For each module's `.md` file in the `/docs` directory, use this exact structure as follows:
<DOCUMENTATION_MODULE_TEMPLATE>
# [Module Name]
## Overview
A concise (2-3 sentence) description of the module's purpose and primary functionality.
## Installation
Instructions for installing or importing the module, including any dependencies.
## Core Concepts
Explanation of the fundamental concepts and design patterns used in this module.
## API Reference
Detailed documentation of all public functions, classes, and interfaces:
### FunctionName(param1, param2)
Description of what the function does.
Parameters:
- `param1` (type): Description of parameter
- `param2` (type): Description of parameter
Returns:
- (return_type): Description of return value
Example:
```typescript
// Example of how to use the function
const result: ReturnType = FunctionName('example', 123);
```
### ClassName
Description of what the class represents and its purpose.
Properties:
- `propertyName` (type): Description of property
Methods:
- `methodName(param1, param2)`: Description of method
## Usage Examples
Practical examples showing common use cases for this module:
```typescript
// Complete, practical example demonstrating the module's functionality
import { SomeComponent } from './module-name';
// Example implementation
```
## Best Practices
Guidelines for effectively and efficiently using this module.
## Troubleshooting
Common issues and their solutions.
## Related Modules
Links to related modules that often work together with this one.
## Changelog
Notable changes to this module, with version numbers and dates.
</DOCUMENTATION_MODULE_TEMPLATE>
This structure provides a comprehensive template that:
1. Starts with a clear overview to immediately communicate the module's purpose
2. Explains core concepts to help developers understand the module's design philosophy
3. Documents the API systematically with consistent formatting
4. Includes practical examples that demonstrate real-world usage
5. Offers troubleshooting advice for common issues
6. Connects related modules to show the bigger picture
7. Tracks changes to help developers understand evolution and breaking changes
Write each section to focus on a specific aspect of the module. This makes the documentation easy to navigate, read, understand, and update.
Use this same exact structure across all module documentation files to create a unified experience that helps developers quickly find the information they need.
## Code Guidelines
### General Code Style & Formatting
- Use English for all code and documentation.
- Always declare the type of each variable and function (parameters and return value).
- Avoid using any.
- Create necessary types.
- Use JSDoc to document public classes and methods.
- Don't leave blank lines within a function.
- One export per file.
### Naming Conventions
- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
- Avoid magic numbers and define constants.
### Functions & Logic
- Keep functions short and single-purpose (<20 lines).
- Avoid deeply nested blocks by:
- Using early returns.
- Extracting logic into utility functions.
- Use higher-order functions (map, filter, reduce) to simplify logic.
- Use arrow functions for simple cases (<3 instructions), named functions otherwise.
- Use default parameter values instead of null/undefined checks.
- Use RO-RO (Receive Object, Return Object) for passing and returning multiple parameters.
### Data Handling
- Avoid excessive use of primitive types; encapsulate data in composite types.
- Avoid placing validation inside functions—use classes with internal validation instead.
- Prefer immutability for data:
- Use readonly for immutable properties.
- Use as const for literals that never change.
## Research‑First Policy
- Search before you speak. Assume every prompt may reference events, docs, libraries, or code after your training cut‑off; run an external search *before* composing an answer.
- Verify with ≥ 2 authoritative sources. Cross‑check results—prefer primary docs, peer‑reviewed papers, official statements, or first‑party APIs.
- No fabrication. Do not invent facts, citations, statistics, or dates under any circumstance.
- Stateless mindset. Assume no persistent memory outside this session; never claim long‑term recall of prior conversations.
- Always research the latest version of the tools and technologies you're using.
## Deliverables per Every Change, Interaction, or Action/Message:
- Working application code FOR EVERY CHANGE
- Intensive developer-focused `.md` documentation in the `/docs` folder FOR EVERY CHANGE